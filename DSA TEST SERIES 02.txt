1) Divide n' Square

// JAVA SOLUTION

import java.io.*;
import java.util.*;

public class Solution {
     static int fact (int n)
    {
        int fact=1;
        for(int i=1;i<=n;i++)
        {
            fact=fact*i;
        }
        return fact;
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
            //System.out.println("enter a number");
            String a =sc.next();int count=0,sum=0;
            int len=a.length();
            //System.out.println(a);
            for(int i=0;i<len;i++)
            {
                char ch=a.charAt(i);
                if(Character.isDigit(ch) && ch!='0')
                {
                    count++;
                }
            }
            //System.out.println(count);
            if(count==len)
            {
                char arr[]=a.toCharArray();
                for(int j=0;j<arr.length;j++)
                {
                    String num=arr[j]+"";
                    int num1=Integer.parseInt(num);
                    sum=sum+fact(num1);
                }
                String res=sum+"";
           int ind=res.length()-1;
            if(res.charAt(ind)=='2'||res.charAt(ind)=='3'|| res.charAt(ind)=='7'||
                    res.charAt(ind)=='8')
            {
                System.out.println("Battle Lose");
            }
            else
            {
                System.out.println("Battle Won");
            }
                
                
                
            }
            else
            {
                System.out.println("Invalid Input");
            }
           
        
    }
}


2) Find The Cheapest Path

// Java Solution

import java.util.ArrayList;
import java.util.Scanner;

public class Solution 
{

    //static variables--> shared among whole class
    static String s="";
    static int minsum=Integer.MAX_VALUE;

    //recursive function to find shorted path possible
    //m,n==>size of Array A      i,j==>current row,column   
    //list==>ArrayList which stores path till current element
    //sum==> summation of costs requried for reaching current element
    static int shortestPath(int m,int n,int [][] A,int i,int j,ArrayList<Character> list,int sum)
    {
        //invalid  condition
        if(i>=m || j>=n )
        {
            return 0;
        }

        //if A[i][j]==-1  it means we can't pass through this element
        //so return 
        if(A[i][j]==-1) return 0;


        //add cost of currenrt element
        sum +=A[i][j];

        //if destination found
        //then check if path is shortestPath or not
        if(i==m-1 && j==n-1)
        {
            // String S =list.toString().substring(1,3*list.size() -1).replaceAll(", ", "");
            if(sum<minsum)
            {
                s=list.toString().substring(1,3*list.size() -1).replaceAll(", ", "");
                minsum = sum;
            }
            // System.out.println(S +" total cost: "+ sum);
            return 1;
        }



        //not any exit conditions 
        //and go in every possible way through calling shortestPath function by changing i and j
        //write path choosing statements in order of maximum priority

        //add direction to list then call shortestPath function
        //after returning of function remove the direction added from list
        //then go for next direction
        list.add('C');
        int cross=shortestPath(m, n, A, i+1, j+1, list, sum);
        list.remove(list.size()-1);

        list.add('R');
        int right=shortestPath(m, n, A, i, j+1, list, sum);
        list.remove(list.size()-1);

        list.add('D');
        int down=shortestPath(m, n, A, i+1, j, list, sum);
        list.remove(list.size()-1);

        //returns the possible paths from current position to destination
        return right + down + cross;
        
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        ArrayList<Character> list = new ArrayList<Character>();
        int [][] A=new int[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                A[i][j]=sc.nextInt();
            }
        }

        int total =shortestPath(m, n, A, 0, 0, list, 0);
        if(total==0) 
            System.out.println("NOT FOUND");
        else
        {
            System.out.println(total);
            System.out.println(s);
        }
        sc.close();
    }
    
}



3) String Scoring

// Java Solution

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        char arr[]={'A','B','C','D','E','F','G','H','I','J','K','L','M'};
        char arr1[]={'Z','Y','X','W','V','U','T','S','R','Q','P','O','N'};
        String s=sc.nextLine();
        s=s.toUpperCase();
        int sum=0,sum1=0;
        for(int i=0;i<s.length();i++)
        {
            char ch=s.charAt(i);
            if(ch>='A' && ch<='M')
            {
                for(int j=0;j<arr.length;j++)
                {
                    if(ch==arr[j])
                    {
                        sum=sum+j;
                    }
                }
            }
            else
            {
                for(int j=0;j<arr1.length;j++)
                {
                    if(ch==arr1[j])
                    {
                        sum1=sum1+j;
                    }
                }
            }
        }
        if(sum>sum1)
        {
            System.out.println("kira");
        }
        else if(sum1>sum)
        {
            System.out.println("ryuzaki");
        }
        
        else
        {
            System.out.println("draw");
        }
    }
}
                



4)  Ulat_Palat

// Java Solution

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
            //System.out.println("Enter a string");
            
            String s =sc.next();
            s=s.toUpperCase();
            String news="";
            for(int i=0;i<s.length();i++)
            {
                char ch=s.charAt(i);
                if(ch>='A' && ch<='Z')
                {
                    news=news+ch;
                }
            }
            //System.out.println(news);
            StringBuffer sb=new StringBuffer(news);
            s=(sb.reverse().toString());
            
            String new1=s.charAt(0)+s.substring(1).toLowerCase();
            System.out.println(new1);
        
            
            
        
    }
}
